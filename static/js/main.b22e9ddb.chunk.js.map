{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Scroll","props","className","style","overflowY","border","borderColor","height","width","children","Card","name","email","phone","id","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAkBeA,EAfA,SAACC,GACZ,OACI,qBAAQC,UAAU,YACVC,MACI,CAAIC,UAAU,SACVC,OAAO,YACPC,YAAY,GACZC,OAAO,QACPC,MAAM,QANtB,SAQKP,EAAMQ,YCGJC,EAdF,SAACT,GACZ,IAAOU,EAA0BV,EAA1BU,KAAMC,EAAoBX,EAApBW,MAAOC,EAAaZ,EAAbY,MAAOC,EAAMb,EAANa,GAC3B,OACE,sBAAKZ,UAAU,qDAAf,UACE,qBAAKa,IAAG,+BAA0BD,EAA1B,iBAA6CE,IAAI,oBACzD,gCACE,6BAAKL,IACL,4BAAIC,IACJ,0CAAaC,YCYNI,EAnBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAChB,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIP,GAAII,EAAOG,GAAGP,GACdH,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,MACjBC,MAAOK,EAAOG,GAAGR,OAJZK,EAAOG,GAAGP,UCKxBQ,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKrB,UAAU,MAAf,SACI,uBACAA,UAAU,2CACVsB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OC2CPI,E,kDA5CX,aAAgB,IAAD,8BACX,gBAeJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhBzC,EAAKC,MAAQ,CACThB,OAAS,GACTa,YAAc,IAJP,E,qDAQf,WAAsB,IAAD,OAEjBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACZ,OAASqB,S,oBAShD,WAAU,IAAD,OACCC,EAAiBC,KAAKP,MAAMhB,OAAOwB,QAAO,SAAAC,GAC5C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAKpE,OAAQH,KAAKP,MAAMhB,OAAO4B,OAKlB,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,aAAd,0BACA,cAAC,EAAD,CAAWqB,aAAckB,KAAKb,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUV,OAAQsB,SAR1B,qBAAKtC,UAAU,iB,GA9Bb6C,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b22e9ddb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div    className='scrollbar'\r\n                style={\r\n                    {   overflowY:'scroll',\r\n                        border:'5px solid', \r\n                        borderColor:'' , \r\n                        height:'700px', \r\n                        width:'auto'}\r\n                        }>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const {name, email, phone, id} = props;\r\n  return(\r\n    <div className='tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"A Robot Factory\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        <p>Contact: {phone}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card \r\n                        key={robots[i].id} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        phone={robots[i].phone} />\r\n                    )\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ph7 ba br3 b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='Search Robots'\r\n            onChange={searchChange}\r\n        />\r\n        </div>   \r\n    );\r\n}\r\n\r\nexport default SearchBox","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport CardList  from '../components/CardList';\r\n// import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nclass App extends Component  {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchfield : '',\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        //for the sake of updating robots with api\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => {this.setState({robots : users})})\r\n        // console.log(\"componentDidMount\");\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        // console.log(event.target.value);\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        // console.log(\"render\");\r\n        // console.log(filteredRobots) \r\n        //replaced if else with ? : respectively\r\n        return !this.state.robots.length ? (\r\n                <div className='loaderss'>\r\n                </div>\r\n            ): // \":\" acts as else statement when \"!\" if statement part fails.\r\n                (\r\n                <div className='tc'>\r\n                    <h1 className='f1 pa3 ma0'>ROBO FRIENDS</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            ); \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}